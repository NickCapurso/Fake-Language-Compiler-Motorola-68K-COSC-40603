/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.ArrayList;
import java.util.Stack;
public class Parser implements ParserConstants {

  //***********************************************************************************************
  //
  // Class Variables
  //
  // Variables		Type							Description
  // ---------		----------------------------	-----------------------------------------------
  // symbolTable	ArrayList<SymbolTableEntry>		The symbol table (SymbolTableEntry is described
  //												in its respective class)
  // quadList		ArrayList<Quad>					The list of generated quads
  // argumentStack	Stack<String>					The stack upon which variables representing
  //												an evaluated expression are pushed and popped
  //												to be used as arguments for quads
  // whileStack		Stack<WhileItem>				The stack that keeps track of the nesting
  //												of labeled while loops
  // currentTempNum	int								The current temporary variable number
  //
  //***********************************************************************************************
  private static ArrayList<SymbolTableEntry> symbolTable = new ArrayList<SymbolTableEntry >();
  private static ArrayList<Quad> quadList = new ArrayList<Quad >();
  private static Stack<String> argumentStack = new Stack<String>();
  private static Stack<WhileItem> whileStack = new Stack<WhileItem>();
  private static int currentTempNum = 0;

  //*******************************************************************************************
  // Begin Main Method
  //	Creates the parser class and the code generator class
  //
  //*******************************************************************************************
  public static void main (String [] args) throws ParseException
  {
        Parser parser = new Parser(System.in);
        parser.Program();

        CodeGenerator codeGenerator = new CodeGenerator(quadList, symbolTable);
        codeGenerator.genCode();
  }
  //*******************************************************************************************
  // End Main Method 
  //*******************************************************************************************


  //*******************************************************************************************
  // Begin Find Symbol Table Entry By Id Method
  //	Searches the symbol table for an entry matching the passed in identifier.
  //	Returns either the index into the symbol table, if found, or -1 if not found.
  //
  //*******************************************************************************************
  private static int findSTEntryById(String id)
  {
        int index = 0;
        for(SymbolTableEntry current : symbolTable)
        {
                if(current.getIdentifier().equals(id))
                        return index;

                index++;
        }
        return -1;
  }
  //*******************************************************************************************
  // End Find Symbol Table Entry by Id Method
  //*******************************************************************************************


  //*******************************************************************************************
  // Begin Generate Symbol Table Entry Method
  //	Generates an entry in the symbol table with the passed in identifier.
  //
  //*******************************************************************************************
  private static void genSTEntry(String id)
  {
        symbolTable.add(new SymbolTableEntry(id, 0, SymbolTableEntry.Location.MEMORY));
  }
  //*******************************************************************************************
  // End Generate Symbol Table Entry Method
  //*******************************************************************************************


  //*******************************************************************************************
  // Begin Generate Quad Method
  //	Generates an quad from the passed in operator, two arguments, and result. The quad
  //	is added to the quads list.
  //
  //*******************************************************************************************
  private static void genQuad(String op, String arg1, String arg2, String result)
  {
        quadList.add(new Quad(op, arg1, arg2, result));
  }
  //*******************************************************************************************
  // End Generate Quad Method
  //*******************************************************************************************


  //*******************************************************************************************
  // Begin New Temp Method
  //	Returns a new temporary variable (String) and increments the counter.
  //	Temporary variables are of the format "$X"
  //
  //*******************************************************************************************
  private static String newTemp()
  {
        return "$" + currentTempNum++;
  }
  //*******************************************************************************************
  // End New Temp Method
  //*******************************************************************************************


  //*******************************************************************************************
  // Begin Backpatch Method
  //	Goes through jump/jeqz quads until a "0" is found in the result field. The quads'
  //	result fields are set to point to the new quad specified.
  //
  //	start - indicates the quad number where the backpatch operation should begin.
  //	newQuad - indicates the new quad number that should be patched.
  //
  //*******************************************************************************************
  private static void backpatch(int start, int newQuad)
  {
        int curr = start;
        boolean done = false;
        Quad currentQuad;
        do
        {
                //Get the next quad
                currentQuad = quadList.get(curr);

                //If its result is "0," then this is the last quad to patch
                if(currentQuad.getResultName().equals("0"))
                        done = true;
                //If the quad is not a jeqz or jump quad, quit	
                else if(!(currentQuad.getOperation().equals("jeqz") ||
                        currentQuad.getOperation().equals("jump")))
                        break;

                //Get the next quad number
                if(!done)
                        curr = Integer.parseInt(currentQuad.getResultName());

                //Replace the old result with the new result	
                currentQuad.setResultName(""+newQuad);
        }while (!done);
  }
  //*******************************************************************************************
  // End Backpatch Method
  //*******************************************************************************************


  //*******************************************************************************************
  // Begin While Stack Contains Method
  //	Searches the while stack to see if a while loop with the given label already exists.
  //	Returns either true or false.
  //
  //*******************************************************************************************
  private static boolean whileStackContains(String search)
  {
        for(int i = 0; i < whileStack.size(); i++)
        {
                if(whileStack.get(0).id.equals(search))
                        return true;
        }
        return false;
  }
  //*******************************************************************************************
  // End While Stack Contains Method
  //*******************************************************************************************


  //*******************************************************************************************
  // WhileItem Class
  //	Two-tuple class for the label of a while loop and a "pointer" to another quad in order
  //	to chain EXIT statements together
  //
  //*******************************************************************************************
  static class WhileItem
  {
    String id;
    int value;

    public WhileItem(String i, int v)
    {
                id = i;
                value = v;
    }
  }

//*************************************************************************************************
// End Parser
//*************************************************************************************************


//*************************************************************************************************
//*************************************************************************************************
// Begin Productions
//	program 	=> 	(statement)*
//	statement	=>	(label-id)? (WHILE expression)? LOOP (statement)* END LOOP;
//				=>	IF expression THEN (statement)* (ELSIF expression THEN (statement)*)*
//					(ELSE (statement)*)? END IF;
//				=>	id := expression
//				=>	EXIT label-id;
//				=>	GET(input-list);
//				=>  PUT(output-list);
//	label-id	=>	id
//	input-list	=>	id(,id)*
//	output-list	=>	(string | expression) (, (string | expression))*
//	expression	=>	and (| and)*
//	and			=>	rel (& rel)*
//	rel			=>	term (rel-op term)*
//	term		=>	factor (add-op factor)*
//	factor		=>	primary (mul-op primary)*
//	primary		=>	(unary-op)* unit
//	unit		=>	id | int | (SQRT | ABS)* ( expression )
//	rel-op		=>	< | <= | = | /= | >= | >
// 	mul-op		=>	* | /
//	add-op		=>	+ | -
//	unary-op	=>	+ | - | ^
//
//*************************************************************************************************
//*************************************************************************************************


//*************************************************************************************************
// Begin Program Production
//	program 	=> 	(statement)*
//
//*************************************************************************************************
  static final public void Program() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      Statement();
    }
    if (jj_2_2(2)) {
      jj_consume_token(0);
    } else if (jj_2_3(2)) {
      jj_consume_token(QUIT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     genQuad("END", " ", " ", " ");     //Placeholder end-of-quad-list

  }

//*************************************************************************************************
// End Program Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Statement Production
//	statement	=>	(label-id)? (WHILE expression)? LOOP (statement)* END LOOP;
//				=>	IF expression THEN (statement)* (ELSIF expression THEN (statement)*)*
//					(ELSE (statement)*)? END IF;
//				=>	id := expression
//				=>	EXIT label-id;
//				=>	GET(input-list);
//				=>  PUT(output-list);
//
//	Variables		Type			Description
//	---------		--------		-----------
//	id				Token			Holds a matched identifier
//
//	temp			Stack<Integer>	Used to keep track of jump/jeqz in while/if statements to
//									resolve forward jumps
//
//	nextQuad		int				Holds the number of the next quad to be generated
//
//	labelId			String			Holds a label for a loop
//
//*************************************************************************************************
  static final public void Statement() throws ParseException {
  Token id;
  Stack<Integer> temp = new Stack<Integer>();
  int nextQuad = 0;
  String labelId = "";
    if (jj_2_13(2)) {
      //-------------------------------------------------------------------------------------
        // Begin Assignment Statement
        //	id := expression @1
        //
        //	@1: After an assignment statement is matched, add the new variable to the symbol
        //		if it isn't already in there. Generate the assignment quad.
        //
        //-------------------------------------------------------------------------------------
        id = jj_consume_token(ID);
      jj_consume_token(ASSN);
      Expression();
      jj_consume_token(SEMICOL);
    //@1
        if(findSTEntryById(id.image.toUpperCase()) == -1)
        genSTEntry(id.image.toUpperCase()); //Not in symbol table - add it
        genQuad(":=", argumentStack.pop(), " ", id.image.toUpperCase());
    } else if (jj_2_14(2)) {
      jj_consume_token(IF);
      Expression();
          //@1
          nextQuad = quadList.size();
          genQuad("jeqz", argumentStack.pop(), " ", "0");
          temp.push(nextQuad);
      jj_consume_token(THEN);
      label_2:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_2;
        }
        Statement();
      }
      label_3:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(ELSIF);
          //@2
          nextQuad = quadList.size();
          genQuad("jump", " ", " ", "0");
          quadList.get(temp.pop()).setResultName("" + (nextQuad+1));
          temp.push(nextQuad);
        Expression();
          //@3
          nextQuad = quadList.size();
          genQuad("jeqz", argumentStack.pop(), " ", "0");
          temp.push(nextQuad);
        jj_consume_token(THEN);
        label_4:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_4;
          }
          Statement();
        }
      }
      if (jj_2_8(2)) {
        jj_consume_token(ELSE);
          //@4
          nextQuad = quadList.size();
          genQuad("jump", " ", " ", "0");
          quadList.get(temp.pop()).setResultName("" + quadList.size());
          temp.push(nextQuad);
        label_5:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_5;
          }
          Statement();
        }
      } else {
        ;
      }
      jj_consume_token(END);
      jj_consume_token(IF);
      jj_consume_token(SEMICOL);
          //@5
          while(!(temp.isEmpty()))
                quadList.get(temp.pop()).setResultName("" + quadList.size());
    } else if (jj_2_15(2)) {
      if (jj_2_9(2)) {
        labelId = LabelId();
        jj_consume_token(COLON);
      } else {
        ;
      }
                if(labelId.equals(""))
                {       //@1
                        whileStack.push(new WhileItem(newTemp(),0));
                        nextQuad = quadList.size();
                        temp.push(nextQuad);
                }
                else
                {       //@2
                        if(whileStackContains(labelId))
                                {if (true) throw new RuntimeException("Loop " + labelId + " already exists, may create ambiguous EXIT statements");}

                        whileStack.push(new WhileItem(labelId,0));
                        nextQuad = quadList.size();
                        temp.push(nextQuad);
                }
      if (jj_2_10(2)) {
        jj_consume_token(WHILE);
        Expression();
                //@3
                whileStack.peek().value = quadList.size();
                genQuad("jeqz", argumentStack.pop()," ", "0");
      } else {
        ;
      }
      jj_consume_token(LOOP);
      label_6:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_6;
        }
        Statement();
      }
      jj_consume_token(END);
      jj_consume_token(LOOP);
      jj_consume_token(SEMICOL);
                //@4
                genQuad("jump", " ", " ", ""+temp.pop());
                backpatch(whileStack.pop().value, quadList.size());
    } else if (jj_2_16(2)) {
      jj_consume_token(EXIT);
      if (jj_2_12(2)) {
        labelId = LabelId();
      } else {
        ;
      }
      jj_consume_token(SEMICOL);
                if(labelId.equals(""))
                {       //@1 - Unlabeled exit
                        nextQuad = quadList.size();
                        genQuad("jump"," "," ",""+whileStack.peek().value);
                        whileStack.peek().value = nextQuad;
                }else
                {       //@1 - Labeled exit
                        nextQuad = quadList.size();
                        int loc = 0;
                        for(int i = 0; i < whileStack.size(); i++)
                        {
                                if(whileStack.get(i).id.equals(labelId))
                                {
                                        loc = i;
                                        break;
                                }
                        }

                        genQuad("jump"," "," ",""+whileStack.get(loc).value);
                        whileStack.get(loc).value = nextQuad;
                }
    } else if (jj_2_17(2)) {
      jj_consume_token(GET);
      jj_consume_token(LPARAN);
      InputList();
      jj_consume_token(RPARAN);
      jj_consume_token(SEMICOL);
    } else if (jj_2_18(2)) {
      jj_consume_token(PUT);
      jj_consume_token(LPARAN);
      OutputList();
      jj_consume_token(RPARAN);
      jj_consume_token(SEMICOL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//*************************************************************************************************
// End Statement Production
//*************************************************************************************************


//*************************************************************************************************
// Begin LabelId Production
//	label-id	=>	id
//
//	Returns a String representing the identifier that was matched. (ToUpperCase because not
//	case-sensitive)
//
//*************************************************************************************************
  static final public String LabelId() throws ParseException {
    jj_consume_token(ID);
        {if (true) return getToken(0).image.toUpperCase();}
    throw new Error("Missing return statement in function");
  }

//*************************************************************************************************
// End LabelId Production
//*************************************************************************************************


//*************************************************************************************************
// Begin InputList Production
//	input-list	=>	id @1 (,id @2)*
//
//	@1: Checks to see if the identifier has been declared. Then generates the get-quad.
//	@2: Same as @1
//
//*************************************************************************************************
  static final public void InputList() throws ParseException {
  Token token = null;
    token = jj_consume_token(ID);
    //@1
        if(findSTEntryById(token.image.toUpperCase()) == -1)
                {if (true) throw new RuntimeException("Variable " + token.image + " not declared!");}
        genQuad("get"," "," ", token.image.toUpperCase());
    label_7:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      token = jj_consume_token(ID);
        //@2
        if(findSTEntryById(token.image.toUpperCase()) == -1)
                {if (true) throw new RuntimeException("Variable " + token.image + " not declared!");}
        genQuad("get"," "," ", token.image.toUpperCase());
    }
  }

//*************************************************************************************************
// End InputList Production
//*************************************************************************************************


//*************************************************************************************************
// Begin OutputList Production
//	output-list	=>	(string @1| expression @2) (, (string @3| expression @4))*
//
//	@1: Adds the string literal to the symbolt table if it's not already there and generates
//		a putString quad.
//	@2: Generates a putInt instruction based on the top of the stack (contains the value
//		of the evaluated expression)
//	@3: Same as @1
//	@4: Same as @2
//
//*************************************************************************************************
  static final public void OutputList() throws ParseException {
  Token token = null;
  int index = 0;
    if (jj_2_20(2)) {
      token = jj_consume_token(STRING);
    //@1
    index = findSTEntryById(token.image);
        if(index == -1)
        {
      genSTEntry(token.image); //Add literal to symbol table
      genQuad("putString", token.image," ", " ");
    }
    else
    {
          genQuad("putString", token.image," ", " ");
    }
    } else if (jj_2_21(2)) {
      Expression();
    //@2
    genQuad("putInt", argumentStack.pop()," ", " ");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      if (jj_2_23(2)) {
        token = jj_consume_token(STRING);
    //@3
    index = findSTEntryById(token.image);
        if(index == -1)
        {
      genSTEntry(token.image);  //Add literal to symbol table
      genQuad("putString", token.image," ", " ");
    }
    else
    {
          genQuad("putString", token.image," ", " ");
    }
      } else if (jj_2_24(2)) {
        Expression();
    //@4
        genQuad("putInt",  argumentStack.pop()," ", " ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//*************************************************************************************************
// End OutputList Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Expression Production
//	expression	=>	and (| and @1)*
//
//	@1: Generates a quad using the top two things on the argument stack (two operands) and an
//		OR operator. The result goes into a temporary variable.
//
//*************************************************************************************************
  static final public void Expression() throws ParseException {
    And();
    label_9:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(OR);
      And();
        //@1
        String secondArg = argumentStack.pop();
        String firstArg = argumentStack.pop();
        String temp = newTemp();

        genQuad("|", firstArg, secondArg, temp);

        genSTEntry(temp);
        argumentStack.push(temp);
    }
  }

//*************************************************************************************************
// End Expression Production
//*************************************************************************************************


//*************************************************************************************************
// Begin And Production
//		and	=>	rel (& rel @1)*
//
//	@1: Generates a quad using the top two things on the argument stack (two operands) and an
//		AND operator. The result goes into a temporary variable.
//
//*************************************************************************************************
  static final public void And() throws ParseException {
    Rel();
    label_10:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(AND);
      Rel();
        //@1
        String secondArg = argumentStack.pop();
        String firstArg = argumentStack.pop();
        String temp = newTemp();

        genQuad("&", firstArg, secondArg, temp);

        genSTEntry(temp);
        argumentStack.push(temp);
    }
  }

//*************************************************************************************************
// End And Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Rel Production
//		rel	=>	term (rel-op term @1)*
//
//	@1: Generates a quad using the top two things on the argument stack (two operands) and an
//		the relational operator. The result goes into a temporary variable.
//
//*************************************************************************************************
  static final public void Rel() throws ParseException {
        String op;
    Term();
    label_11:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_11;
      }
      op = Rel_Op();
      Term();
        String secondArg = argumentStack.pop();
        String firstArg = argumentStack.pop();
        String temp = newTemp();

        genQuad(op, firstArg, secondArg, temp);

        genSTEntry(temp);
        argumentStack.push(temp);
    }
  }

//*************************************************************************************************
// End Rel Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Term Production
//		term =>	factor (add-op factor @1)*
//
//	@1: Generates a quad using the top two things on the argument stack (two operands) and an
//		the add-operator. The result goes into a temporary variable.
//
//*************************************************************************************************
  static final public void Term() throws ParseException {
        String op;
    Factor();
    label_12:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_12;
      }
      op = Add_Op();
      Factor();
        String secondArg = argumentStack.pop();
        String firstArg = argumentStack.pop();
        String temp = newTemp();

        genQuad(op, firstArg, secondArg, temp);

        genSTEntry(temp);
        argumentStack.push(temp);
    }
  }

//*************************************************************************************************
// End Term Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Factor Production
//		term =>	primary (mul-op primary @1)*
//
//	@1: Generates a quad using the top two things on the argument stack (two operands) and an
//		the mul-operator. The result goes into a temporary variable.
//
//*************************************************************************************************
  static final public void Factor() throws ParseException {
        String op;
    Primary();
    label_13:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_13;
      }
      op = Mul_Op();
      Primary();
        String secondArg = argumentStack.pop();
        String firstArg = argumentStack.pop();
        String temp = newTemp();

        genQuad(op, firstArg, secondArg, temp);

        genSTEntry(temp);
        argumentStack.push(temp);
    }
  }

//*************************************************************************************************
// End Factor Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Primary Production
//		primary	=>	(unary-op @1)* unit @2
//
//	unaryOps - A stack that keeps track of the unary operators being applied to a unit, so that
//			   the appropriate quads can be generated in reverse.
//
//	@1:	Pushes the matched unary operator onto the stack.
//	@2:	Generates quads for each of the matched unary operators. The result goes into a
//		temporary variable.
//
//*************************************************************************************************
  static final public void Primary() throws ParseException {
        String op;
        Stack<String> unaryOps = new Stack<String>();
    label_14:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_14;
      }
      op = Unary_Op();
        //@1
        unaryOps.push(op);
    }
    Unit();
        //@2

        if(!unaryOps.isEmpty())
        {
                int s = unaryOps.size();

                for(int i = 0; i < s; i ++)
                {
                        String temp = newTemp();
                        genQuad(unaryOps.pop(), argumentStack.pop(), " ", temp);

                        genSTEntry(temp);
                        argumentStack.push(temp);
                }
        }
  }

//*************************************************************************************************
// End Primary Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Unit Production
//		unit	=>	id @1| int @2| (SQRT | ABS)* ( expression ) @3
//
//	@1:	Checks to make sure the variable has been declared, then pushes it onto the argument stack
//	@2:	Adds the constant to the symbol table and pushes it onto the argument stack
//	@3:	If the user specified SQRT or ABS, a quad is generated and the result put in a temp var
//
//*************************************************************************************************
  static final public void Unit() throws ParseException {
  Token unit = null;
    if (jj_2_34(2)) {
      unit = jj_consume_token(ID);
                String image = unit.image.toUpperCase();
                if(findSTEntryById(image) == -1)
                {if (true) throw new RuntimeException("Variable " + unit.image + " not declared!");}

                argumentStack.push(image);
    } else if (jj_2_35(2)) {
      unit = jj_consume_token(INT);
                if(findSTEntryById(unit.image) == -1)
                genSTEntry(unit.image);
                argumentStack.push(unit.image);
    } else if (jj_2_36(2)) {
      if (jj_2_33(2)) {
        if (jj_2_31(2)) {
          unit = jj_consume_token(SQRT);
        } else if (jj_2_32(2)) {
          unit = jj_consume_token(ABS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      jj_consume_token(LPARAN);
      Expression();
      jj_consume_token(RPARAN);
                if(!(unit == null))
                {
                        String temp = newTemp();
                        genQuad(unit.image, argumentStack.pop(), " ", temp);

                        genSTEntry(temp);
                        argumentStack.push(temp);
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//*************************************************************************************************
// End Unit Production
//*************************************************************************************************


//*************************************************************************************************
// Begin RelOp Production
//	Returns the matched operator.
//
//*************************************************************************************************
  static final public String Rel_Op() throws ParseException {
    if (jj_2_37(2)) {
      jj_consume_token(LT);
    } else if (jj_2_38(2)) {
      jj_consume_token(LE);
    } else if (jj_2_39(2)) {
      jj_consume_token(EQ);
    } else if (jj_2_40(2)) {
      jj_consume_token(NE);
    } else if (jj_2_41(2)) {
      jj_consume_token(GE);
    } else if (jj_2_42(2)) {
      jj_consume_token(GT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

//*************************************************************************************************
// End RelOp Production
//*************************************************************************************************


//*************************************************************************************************
// Begin MulOp Production
//	Returns the matched operator.
//
//*************************************************************************************************
  static final public String Mul_Op() throws ParseException {
    if (jj_2_43(2)) {
      jj_consume_token(MUL);
    } else if (jj_2_44(2)) {
      jj_consume_token(DIV);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

//*************************************************************************************************
// End MulOp Production
//*************************************************************************************************


//*************************************************************************************************
// Begin AddOp Production
//	Returns the matched operator.
//
//*************************************************************************************************
  static final public String Add_Op() throws ParseException {
    if (jj_2_45(2)) {
      jj_consume_token(PLS);
    } else if (jj_2_46(2)) {
      jj_consume_token(MIN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

//*************************************************************************************************
// End AddOp Production
//*************************************************************************************************


//*************************************************************************************************
// Begin Unary Production
//	Returns the matched operator.
//
//*************************************************************************************************
  static final public String Unary_Op() throws ParseException {
    if (jj_2_47(2)) {
      jj_consume_token(PLS);
    } else if (jj_2_48(2)) {
      jj_consume_token(MIN);
    } else if (jj_2_49(2)) {
      jj_consume_token(NOT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(SQRT)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    if (jj_scan_token(LPARAN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(ELSIF)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(PLS)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(EXIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(PLS)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSN)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    if (jj_scan_token(LOOP)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(PUT)) return true;
    if (jj_scan_token(LPARAN)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(QUIT)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(GET)) return true;
    if (jj_scan_token(LPARAN)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(ABS)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[49];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 49; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  //*******************************************************************************************
  // End WhileItem Class
  //*******************************************************************************************
}
