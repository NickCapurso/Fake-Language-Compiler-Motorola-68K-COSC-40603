/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COLON = 6;
  /** RegularExpression Id. */
  int SEMICOL = 7;
  /** RegularExpression Id. */
  int COMMA = 8;
  /** RegularExpression Id. */
  int LPARAN = 9;
  /** RegularExpression Id. */
  int RPARAN = 10;
  /** RegularExpression Id. */
  int LE = 11;
  /** RegularExpression Id. */
  int GE = 12;
  /** RegularExpression Id. */
  int NE = 13;
  /** RegularExpression Id. */
  int LT = 14;
  /** RegularExpression Id. */
  int GT = 15;
  /** RegularExpression Id. */
  int EQ = 16;
  /** RegularExpression Id. */
  int MUL = 17;
  /** RegularExpression Id. */
  int DIV = 18;
  /** RegularExpression Id. */
  int PLS = 19;
  /** RegularExpression Id. */
  int MIN = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int AND = 22;
  /** RegularExpression Id. */
  int OR = 23;
  /** RegularExpression Id. */
  int ASSN = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int ELSIF = 26;
  /** RegularExpression Id. */
  int END = 27;
  /** RegularExpression Id. */
  int EXIT = 28;
  /** RegularExpression Id. */
  int GET = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int LOOP = 31;
  /** RegularExpression Id. */
  int PUT = 32;
  /** RegularExpression Id. */
  int THEN = 33;
  /** RegularExpression Id. */
  int WHILE = 34;
  /** RegularExpression Id. */
  int SQRT = 35;
  /** RegularExpression Id. */
  int ABS = 36;
  /** RegularExpression Id. */
  int QUIT = 37;
  /** RegularExpression Id. */
  int ID = 38;
  /** RegularExpression Id. */
  int INT = 39;
  /** RegularExpression Id. */
  int STRING = 40;
  /** RegularExpression Id. */
  int LETTER = 41;
  /** RegularExpression Id. */
  int DIGIT = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"<=\"",
    "\">=\"",
    "\"/=\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\":=\"",
    "<ELSE>",
    "<ELSIF>",
    "<END>",
    "<EXIT>",
    "<GET>",
    "<IF>",
    "<LOOP>",
    "<PUT>",
    "<THEN>",
    "<WHILE>",
    "<SQRT>",
    "<ABS>",
    "\"$QUIT\"",
    "<ID>",
    "<INT>",
    "<STRING>",
    "<LETTER>",
    "<DIGIT>",
  };

}
